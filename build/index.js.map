{"version":3,"sources":["webpack://Swich/webpack/universalModuleDefinition","webpack://Swich/webpack/bootstrap","webpack://Swich/webpack/runtime/define property getters","webpack://Swich/webpack/runtime/hasOwnProperty shorthand","webpack://Swich/webpack/runtime/make namespace object","webpack://Swich/./src/lib/index.ts"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","defaultMatcher","config","valueToMatch","pattern","RegExp","test","catchFunctionErrors","acceptTruthyFunctionReturn","error","strict","defaultResultGetter","result","resultToBeSet","runResultFunction","replacement","performReplaceOnRegex","replace","getRegexResult","createSwich","returnMany","defaultReturnMany","defaultStrict","defaultAcceptTruthyFunctionReturn","defaultCatchFunctionErrors","defaultPerformReplaceOnRegex","defaultRunResultFunction","matcher","defaultMatcherValue","resultGetter","defaultResultGetterValue","patterns","found","setResult","setFound","push","verifyValue","getResult","forEach","matchArr","length","undefined","gt","compareValue","gte","lt","lte"],"mappings":";;;;;;;;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAe,MAAID,IAEnBD,EAAY,MAAIC,IARlB,CASGK,MAAM,WACT,M,mBCTA,IAAIC,EAAsB,CCA1B,EAAwB,CAACL,EAASM,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAER,EAASO,IAC5EE,OAAOC,eAAeV,EAASO,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3E,EAAwB,CAACM,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClF,EAAyBd,IACH,oBAAXkB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeV,EAASkB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeV,EAAS,aAAc,CAAEoB,OAAO,M,klCC4BhD,IAAMC,EACX,SACEC,GADF,OAGA,SAACC,EAAsBC,GACrB,GAAIA,aAAmBC,OACrB,MAA+B,iBAAjBF,GACVC,EAAQE,KAAKH,GAGnB,GAAuB,mBAAZC,EAAwB,CACjC,IAAIF,EAAOK,oBAWT,OAAKL,EAAOM,6BAGDJ,EAAQD,IAFgB,IAA1BC,EAAQD,GAXjB,IACE,OAAKD,EAAOM,6BAGDJ,EAAQD,IAFgB,IAA1BC,EAAQD,GAIjB,MAAOM,GACP,OAAO,GAWb,OAAIP,EAAOQ,OACFN,IAAYD,EAEdC,GAAWD,IAGTQ,EACX,SACET,GADF,OAGA,SAACC,EAAsBC,EAA0BQ,GAC/C,IAeMC,EACJX,EAAOY,mBAAuC,mBAAXF,EAC/BA,EAAOT,GACPS,EAEN,OAAOR,aAAmBC,OApBH,SACrBF,EACAC,EACAW,GAEA,MAC0B,iBAAjBZ,GACgB,iBAAhBY,GACPb,EAAOc,sBAEAb,EAAac,QAAQb,EAASW,GAEhCA,EASLG,CAAef,EAAcC,EAASS,GACtCA,IAGKM,EACX,wEAS8C,GAT9C,IACEC,WAAYC,OADd,aAEEX,OAAQY,OAFV,aAGEd,2BAA4Be,OAH9B,aAIEhB,oBAAqBiB,OAJvB,aAKER,sBAAuBS,OALzB,aAMEX,kBAAmBY,OANrB,aAOEC,QAASC,OAPX,MAOiC3B,EAPjC,MAQE4B,aAAcC,OARhB,MAQ2CnB,EAR3C,SAUA,SACEoB,GADF,6DAWgD,GAXhD,IAGIX,kBAHJ,MAGiBC,EAHjB,MAIIX,cAJJ,MAIaY,EAJb,MAKId,kCALJ,MAKiCe,EALjC,MAMIhB,2BANJ,MAM0BiB,EAN1B,MAOIR,6BAPJ,MAO4BS,EAP5B,MAQIX,yBARJ,MAQwBY,EARxB,MASIC,eATJ,MAScC,EATd,MAUIC,oBAVJ,MAUmBC,EAVnB,SAaA,WAA2C,IAA1C3B,IAA0C,yDACnCD,EAAS,CACbkB,aACAV,SACAF,6BACAD,sBACAS,wBACAF,qBAGEkB,GAAQ,EACRpB,EAA8BQ,EAAa,GAAK,KAE9Ca,EAAY,SAACjC,GAAoC,IAApBkC,IAAoB,yDACrDF,IAAQE,GAAkBF,EAEtBZ,EACDR,EAAqBuB,KAAKnC,GAE3BY,EAASZ,GAIPoC,EAAcT,EAAQzB,GACtBmC,EAAYR,EAAa3B,GAkB/B,OAhBA6B,EAASO,SAAQ,SAACC,GAChB,QAA0BA,EAA1B,GAAOnC,EAAP,KAAgBQ,EAAhB,KACA,IAAIoB,GAAUZ,EAGd,OAAwB,IAApBmB,EAASC,QAAiBR,EAM1BI,EAAYjC,EAAwBC,GAC/B6B,EAAUI,EAAUlC,EAAwBC,EAASQ,SAD9D,EALSqB,EACLI,EAAUlC,OAAwBsC,EAAWrC,IAC7C,MAQCQ,KAGE8B,EAAK,SAACC,GAAD,OAA0B,SAAC3C,GAAD,OAC1CA,EAAQ2C,IACGC,EAAM,SAACD,GAAD,OAA0B,SAAC3C,GAAD,OAC3CA,GAAS2C,IACEE,EAAK,SAACF,GAAD,OAA0B,SAAC3C,GAAD,OAC1CA,EAAQ2C,IACGG,EAAM,SAACH,GAAD,OAA0B,SAAC3C,GAAD,OAC3CA,GAAS2C,IAOX,QALqB,SACnBZ,GADmB,IAEnB7B,EAFmB,uDAEgC,GAFhC,OAGhBiB,IAA+BY,EAAU7B,I","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Swich\"] = factory();\n\telse\n\t\troot[\"Swich\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Object } from \"ts-toolbelt\";\n\ntype Pattern<TValue> =\n  | RegExp\n  | ((value: TValue) => boolean)\n  | ((value: TValue) => any)\n  | any;\ntype Result<TValue, TOutput> = TOutput | ((param: TValue) => TOutput);\ntype CaseElement<TValue, TOutput> = [Pattern<TValue>, Result<TValue, TOutput>];\ntype DefaultCaseElement<TValue, TOutput> = [Result<TValue, TOutput>];\ntype CaseElements<TValue, TOutput> = (\n  | CaseElement<TValue, TOutput>\n  | DefaultCaseElement<TValue, TOutput>\n)[];\n\ntype Matcher<TValue, TOutput> = (\n  config: Object.Omit<Config<TValue, TOutput>, \"matcher\" | \"resultGetter\">\n) => (valueToMatch: TValue, pattern: Pattern<TValue>) => boolean;\ntype ResultGetter<TValue, TOutput> = (\n  config: Object.Omit<Config<TValue, TOutput>, \"matcher\" | \"resultGetter\">\n) => (valueToMatch: TValue, pattern: Pattern<TValue>, result: any) => TOutput;\n\ntype Config<TValue, TOutput> = {\n  returnMany: boolean;\n  strict: boolean;\n  acceptTruthyFunctionReturn: boolean;\n  catchFunctionErrors: boolean;\n  performReplaceOnRegex: boolean;\n  runResultFunction: boolean;\n  matcher: Matcher<TValue, TOutput>;\n  resultGetter: ResultGetter<TValue, TOutput>;\n};\n\nexport const defaultMatcher =\n  <TValue, TOutput>(\n    config: Object.Omit<Config<TValue, TOutput>, \"matcher\" | \"resultGetter\">\n  ) =>\n  (valueToMatch: TValue, pattern: Pattern<TValue>): boolean => {\n    if (pattern instanceof RegExp) {\n      return typeof valueToMatch === \"string\"\n        ? pattern.test(valueToMatch)\n        : false;\n    }\n    if (typeof pattern === \"function\") {\n      if (config.catchFunctionErrors) {\n        try {\n          if (!config.acceptTruthyFunctionReturn) {\n            return pattern(valueToMatch) === true;\n          } else {\n            return !!pattern(valueToMatch);\n          }\n        } catch (error) {\n          return false;\n        }\n      } else {\n        if (!config.acceptTruthyFunctionReturn) {\n          return pattern(valueToMatch) === true;\n        } else {\n          return !!pattern(valueToMatch);\n        }\n      }\n    }\n\n    if (config.strict) {\n      return pattern === valueToMatch;\n    }\n    return pattern == valueToMatch;\n  };\n\nexport const defaultResultGetter =\n  <TValue, TOutput>(\n    config: Object.Omit<Config<TValue, TOutput>, \"matcher\" | \"resultGetter\">\n  ) =>\n  (valueToMatch: TValue, pattern: Pattern<TValue>, result: any): TOutput => {\n    const getRegexResult = (\n      valueToMatch: TValue,\n      pattern: Pattern<TValue>,\n      replacement: any\n    ) => {\n      if (\n        typeof valueToMatch === \"string\" &&\n        typeof replacement === \"string\" &&\n        config.performReplaceOnRegex\n      ) {\n        return valueToMatch.replace(pattern, replacement);\n      }\n      return replacement;\n    };\n\n    const resultToBeSet =\n      config.runResultFunction && typeof result === \"function\"\n        ? result(valueToMatch)\n        : result;\n\n    return pattern instanceof RegExp\n      ? getRegexResult(valueToMatch, pattern, resultToBeSet)\n      : resultToBeSet;\n  };\n\nexport const createSwich =\n  <TValue, TOutput>({\n    returnMany: defaultReturnMany = false,\n    strict: defaultStrict = true,\n    acceptTruthyFunctionReturn: defaultAcceptTruthyFunctionReturn = true,\n    catchFunctionErrors: defaultCatchFunctionErrors = true,\n    performReplaceOnRegex: defaultPerformReplaceOnRegex = false,\n    runResultFunction: defaultRunResultFunction = true,\n    matcher: defaultMatcherValue = defaultMatcher,\n    resultGetter: defaultResultGetterValue = defaultResultGetter,\n  }: Object.Optional<Config<TValue, TOutput>> = {}) =>\n  (\n    patterns: CaseElements<TValue, TOutput>,\n    {\n      returnMany = defaultReturnMany,\n      strict = defaultStrict,\n      acceptTruthyFunctionReturn = defaultAcceptTruthyFunctionReturn,\n      catchFunctionErrors = defaultCatchFunctionErrors,\n      performReplaceOnRegex = defaultPerformReplaceOnRegex,\n      runResultFunction = defaultRunResultFunction,\n      matcher = defaultMatcherValue,\n      resultGetter = defaultResultGetterValue,\n    }: Object.Optional<Config<TValue, TOutput>> = {}\n  ) =>\n  (valueToMatch: TValue | boolean = true) => {\n    const config = {\n      returnMany,\n      strict,\n      acceptTruthyFunctionReturn,\n      catchFunctionErrors,\n      performReplaceOnRegex,\n      runResultFunction,\n    };\n\n    let found = false;\n    let result: TOutput | TOutput[] = returnMany ? [] : null;\n\n    const setResult = (value: TOutput, setFound = true) => {\n      found = setFound ? true : found;\n\n      if (returnMany) {\n        (result as TOutput[]).push(value);\n      } else {\n        result = value;\n      }\n    };\n\n    const verifyValue = matcher(config);\n    const getResult = resultGetter(config);\n\n    patterns.forEach((matchArr) => {\n      const [pattern, result] = matchArr;\n      if (found && !returnMany) {\n        return;\n      }\n      if (matchArr.length === 1 && !found) {\n        return setResult(\n          getResult(valueToMatch as TValue, undefined, pattern),\n          false\n        );\n      }\n      if (verifyValue(valueToMatch as TValue, pattern)) {\n        return setResult(getResult(valueToMatch as TValue, pattern, result));\n      }\n    });\n\n    return result;\n  };\n\nexport const gt = (compareValue: number) => (value: number) =>\n  value > compareValue;\nexport const gte = (compareValue: number) => (value: number) =>\n  value >= compareValue;\nexport const lt = (compareValue: number) => (value: number) =>\n  value < compareValue;\nexport const lte = (compareValue: number) => (value: number) =>\n  value <= compareValue;\n\nconst defaultSwich = <TValue, TOutput>(\n  patterns: CaseElements<TValue, TOutput>,\n  config: Object.Optional<Config<TValue, TOutput>> = {}\n) => createSwich<TValue, TOutput>()(patterns, config);\n\nexport default defaultSwich;\n"],"sourceRoot":""}